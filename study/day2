




Make build env=local (해결)
Make run env=local (실패)
을 실행시키기 위해 디버깅을 했다.
Run에서 db와 연결하는데 에러가 났다. 해결하지 못했다.


Src 디렉터리를 꼼꼼히 살펴봤다.
controller - service - repository 패턴을 살펴보았다.
그리고 데이터를 주고 받을 때 사용되는 DTO를 보았다.
entities를 보며 typeorm이 어떻게 사용되는지를 살펴보았다.
그래서 각 레포지토리의 각 코드들이 기능적으로는 어떤 역할을 하는지 이해할 수 있었다.
하지만 provider, Injectable 등 di, ioc등이 코드에 어떻게 녹아들어가는지, nest js 의 동기 비동기에 대한 처리가 어떻게 녹아들어가는지 등에 대한 큰 그림은 그릴 수 없없다.
그래도 지엽적인 부분을 공부하면서 관련 개념들에 대해 읽어보며 익숙해지기라도 하자라는 노력을 하였다. 면접 질문에 대답할 만큼의 이해를 얻은건 없는것 같다. 만약 대답을 한다면 단순히 어떤 문장을 외워서 말하는 수준에 그칠것이다.

Index.ts : import를 편하게 해준 것이다. 
import { AuthService, UserService } from '../services'; 이런 식으로 import 줄 수를 줄일 수있다

@Controller(‘auth’) 를 통해 라우팅을 할 수 있다.
그 밑에 @Post('login') 가 있을 경우 경로는 auth/login 이 된다.

Promise는 일종의 인터페이스다.
인터페이스는 약속자체
어떠한 클래스가 어떠한 메소드를 가지고 있는지에 대한 명세서

promise는 resolve reject를 인수로 받는데
비동기 작업이 성공하면 resolve를 실패하면 reject를 호출합니다.
또한 성공했다면 .then을 사용할 수 있습니다.

Promise<LoginResDto>는 비동기 함수가 성공하면 LoginResDto를 반환한다는 뜻

@ManyToOne의 경우 두번째 인자는 생략될 수 있음 
@OneToMany(() => AccessLog, (log) => log.user)
@ManyToOne(() => User)
외래키 칼럼등은 typeorm에서 자동으로 처리.
아직은 typeorm을 보면 erd가 정확하게 그려지지는 않음


  @ManyToOne(() => User, (user) => user.accessLogs, {
    nullable: true,
    onDelete: 'CASCADE',
  })
  user?: Relation<User>;
에서 nullable 과 ?(optional)의 차이는 nullable은 컬럼값이 null이 될 수 있다는 것이고 ?는 해당 속성 없이도 entity 인스턴스를 생성할 수 있다는 뜻


Repository,services에 있는 함수들의 @injectable에 대해 이해하지 못했음, 그 외 로직들은 이해

Https란 무엇인가?
…
provider 란 무엇인가
…

비밀번호 해싱은 알고리즘을 argon2
…. 

useEffect, provider, promise, https에 대해 아는만큼 설명해 보시오.
…

